use sp_std::collections::btree_map::BTreeMap;
use sp_std::vec::Vec;
use sp_std::vec;
use keccak_hash::{keccak, H256};
use rlp::{Prototype, Rlp};

// use crate::errors::TrieError;
use crate::nibbles::Nibbles;
use crate::node::{empty_children, Node};

pub type TrieResult<T> = Result<T, &'static str>;
const HASHED_LENGTH: usize = 32;

pub trait Trie {
     /// Returns the value for key stored in the trie.
    fn get(&self, key: &[u8]) -> TrieResult<Option<Vec<u8>>>;

    /// return value if key exists, None if key not exist, Error if proof is wrong
    fn verify_proof(
        &self,
        root_hash: H256,
        key: &[u8],
        proof: Vec<Vec<u8>>,
    ) -> TrieResult<Option<Vec<u8>>>;
}

#[derive(Debug)]
pub struct EthTrie {
    root: Node,
    root_hash: H256,

    db: BTreeMap<Vec<u8>, Vec<u8>>,

}

#[derive(Clone, Debug)]
enum TraceStatus {
    Start,
    Doing,
    Child(u8),
    End,
}

#[derive(Clone, Debug)]
struct TraceNode {
    node: Node,
    status: TraceStatus,
}

impl TraceNode {
    fn advance(&mut self) {
        self.status = match &self.status {
            TraceStatus::Start => TraceStatus::Doing,
            TraceStatus::Doing => match self.node {
                Node::Branch(_) => TraceStatus::Child(0),
                _ => TraceStatus::End,
            },
            TraceStatus::Child(i) if *i < 15 => TraceStatus::Child(i + 1),
            _ => TraceStatus::End,
        }
    }
}

impl From<Node> for TraceNode {
    fn from(node: Node) -> TraceNode {
        TraceNode {
            node,
            status: TraceStatus::Start,
        }
    }
}

pub struct TrieIterator<'a> {
    trie: &'a EthTrie,
    nibble: Nibbles,
    nodes: Vec<TraceNode>,
}

impl<'a> Iterator for TrieIterator<'a> {
    type Item = (Vec<u8>, Vec<u8>);

    fn next(&mut self) -> Option<Self::Item> {
        loop {
            let mut now = self.nodes.last().cloned();
            if let Some(ref mut now) = now {
                self.nodes.last_mut().unwrap().advance();

                match (now.status.clone(), &now.node) {
                    (TraceStatus::End, node) => {
                        match *node {
                            Node::Leaf(ref leaf) => {
                                let cur_len = self.nibble.len();
                                self.nibble.truncate(cur_len - leaf.key.len());
                            }

                            Node::Extension(ref ext) => {
                                let cur_len = self.nibble.len();
                                self.nibble
                                    .truncate(cur_len - ext.prefix.len());
                            }

                            Node::Branch(_) => {
                                self.nibble.pop();
                            }
                            _ => {}
                        }
                        self.nodes.pop();
                    }

                    (TraceStatus::Doing, Node::Extension(ref ext)) => {
                        self.nibble.extend(&ext.prefix);
                        self.nodes.push((ext.node.clone()).into());
                    }

                    (TraceStatus::Doing, Node::Leaf(ref leaf)) => {
                        self.nibble.extend(&leaf.key);
                        return Some((self.nibble.encode_raw().0, leaf.value.clone()));
                    }

                    (TraceStatus::Doing, Node::Branch(ref branch)) => {
                        let value_option = branch.value.clone();
                        if let Some(value) = value_option {
                            return Some((self.nibble.encode_raw().0, value));
                        } else {
                            continue;
                        }
                    }

                    (TraceStatus::Doing, Node::Hash(ref hash_node)) => {
                        let node_hash = hash_node.hash;
                        if let Ok(n) = self.trie.recover_from_db(node_hash) {
                            self.nodes.pop();
                            match n {
                                Some(node) => self.nodes.push(node.into()),
                                None => {
                                    // println!("Trie node with hash {:?} is missing from the database. Skipping...", &node_hash);
                                    continue;
                                }
                            }
                        } else {
                            //error!();
                            return None;
                        }
                    }

                    (TraceStatus::Child(i), Node::Branch(ref branch)) => {
                        if i == 0 {
                            self.nibble.push(0);
                        } else {
                            self.nibble.pop();
                            self.nibble.push(i);
                        }
                        self.nodes
                            .push((branch.children[i as usize].clone()).into());
                    }

                    (_, Node::Empty) => {
                        self.nodes.pop();
                    }
                    _ => {}
                }
            } else {
                return None;
            }
        }
    }
}

impl EthTrie {
    pub fn iter(&self) -> TrieIterator { // need
        let nodes = vec![(self.root.clone()).into()];
        TrieIterator {
            trie: self,
            nibble: Nibbles::from_raw(&[], false),
            nodes,
        }
    }
    pub fn new() -> Self { // need 
        Self {
            root: Node::Empty,
            root_hash: keccak(&rlp::NULL_RLP.to_vec()),
            db: BTreeMap::<Vec<u8>, Vec<u8>>::new()
        }
    }

    pub fn add_to_db(&mut self, key: H256, value: Vec<u8>) {
        let _ = &self.db.insert(key.as_bytes().to_vec(), value);
    }

    pub fn at_root(&mut self, root_hash: H256) -> Self { // need
        Self {
            root: Node::from_hash(root_hash),
            root_hash,

            db: self.db.clone(),
        }
    }
}

impl Trie for EthTrie {
    /// Returns the value for key stored in the trie.
    fn get(&self, key: &[u8]) -> TrieResult<Option<Vec<u8>>> {
        let path = &Nibbles::from_raw(key, true);
        self.get_at(&self.root, path, 0)
    }

    /// return value if key exists, None if key not exist, Error if proof is wrong
    fn verify_proof(
        &self,
        root_hash: H256,
        key: &[u8],
        proof: Vec<Vec<u8>>,
    ) -> TrieResult<Option<Vec<u8>>> {
        let mut trie = EthTrie::new().at_root(root_hash);
        for node_encoded in proof.into_iter() {
            let hash = keccak(&node_encoded);
            if root_hash.eq(&hash) || node_encoded.len() >= HASHED_LENGTH {
                trie.add_to_db(hash, node_encoded)
            }
        }
        trie.get(key)
    }
}

impl EthTrie {
    fn get_at( // need
        &self,
        source_node: &Node,
        path: &Nibbles,
        path_index: usize,
    ) -> TrieResult<Option<Vec<u8>>> {
        let partial = &path.offset(path_index);
        match source_node {
            Node::Empty => Ok(None),
            Node::Leaf(leaf) => {
                if &leaf.key == partial {
                    Ok(Some(leaf.value.clone()))
                } else {
                    Ok(None)
                }
            }
            Node::Branch(branch) => {
                let borrow_branch = branch;

                if partial.is_empty() || partial.at(0) == 16 {
                    Ok(borrow_branch.value.clone())
                } else {
                    let index = partial.at(0);
                    self.get_at(&borrow_branch.children[index], path, path_index + 1)
                }
            }
            Node::Extension(extension) => {
                let extension = extension;

                let prefix = &extension.prefix;
                let match_len = partial.common_prefix(prefix);
                if match_len == prefix.len() {
                    self.get_at(&extension.node, path, path_index + match_len)
                } else {
                    Ok(None)
                }
            }
            Node::Hash(hash_node) => {
                let node_hash = hash_node.hash;
                let node =
                    self.recover_from_db(node_hash);
                match node {
                    Ok(Some(node)) => self.get_at(&node, path, path_index),
                    _ => Err("Missing Trie-Node")
                }
                
            }
        }
    }

    fn decode_node(&self, data: &[u8]) -> TrieResult<Node> {
        let r = Rlp::new(data);

        if let Err(_err) = r.prototype() {
            return Err("Decoding Error")
        }

        match r.prototype().unwrap() {
            Prototype::Data(0) => Ok(Node::Empty),
            Prototype::List(2) => {
                let key = match r.at(0) {
                    Ok(val) => match val.data() {
                        Ok(val) => val,
                        Err(_err) => return Err("Decoding Error")
                    },
                    Err(_err) => return Err("Decoding Error")
                };
                
                let key = Nibbles::from_compact(key);

                if key.is_leaf() {
                    let val = match r.at(1) {
                        Ok(val) => match val.data() {
                            Ok(val) => val.to_vec(),
                            Err(_err) => return Err("Decoding Error")
                        },
                        Err(_err) => return Err("Decoding Error")
                    };
                    Ok(Node::from_leaf(key, val))
                } else {
                    let data = match r.at(1) {
                        Ok(val) => val.as_raw(),
                        Err(_err) => return Err("Decoding Error")
                    };
                    let n = match self.decode_node(data) {
                        Ok(val) => val,
                        Err(_err) => return Err("Decoding Error")
                    };

                    Ok(Node::from_extension(key, n))
                }
            }
            Prototype::List(17) => {
                let mut nodes = empty_children();
                #[allow(clippy::needless_range_loop)]
                for i in 0..nodes.len() {
                    let rlp_data = match r.at(i) {
                        Ok(val) => val,
                        Err(_err) => return Err("Decoding Error")
                    };
                    let n = self.decode_node(rlp_data.as_raw())?;
                    nodes[i] = n;
                }

                // The last element is a value node.
                let value_rlp = match r.at(16) {
                    Ok(val) => val,
                    Err(_err) => return Err("Decoding Error")
                };

                let value = if value_rlp.is_empty() {
                    None
                } else {
                    match value_rlp.data() {
                        Ok(val) => Some(val.to_vec()),
                        Err(_err) => return Err("Decoding Error")
                    }
                };

                Ok(Node::from_branch(nodes, value))
            }
            _ => {
                if r.is_data() && r.size() == HASHED_LENGTH {
                    let hash = match r.data() {
                        Ok(val) => H256::from_slice(val),
                        Err(_err) => return Err("Decoding Error")
                    };
                    Ok(Node::from_hash(hash))
                } else {
                    Err("Invalid Data")
                }
            }
        }
    }

    fn recover_from_db(&self, key: H256) -> TrieResult<Option<Node>> { // need
        let node = match self
            .db
            .get(&key.as_bytes().to_vec())
        {
            Some(value) => Some(self.decode_node(&value)?),
            None => None
        };
        Ok(node)
    }
}



#[cfg(test)]
mod tests {
    // use sp_std::sync::Arc;
    use sp_std::vec::Vec;
    use sp_std::vec;
    use super::{EthTrie, Trie};
    // use crate::db::{MemoryDB};

    #[test]
    fn test_valid_proof() {
        let proof: Vec<Vec<u8>> = vec![vec![249, 1, 49, 160, 86, 132, 220, 17, 195, 212, 250, 27, 162, 245, 193, 68, 171, 138, 4, 197, 211, 108, 97, 45, 194, 157, 207, 143, 193, 199, 208, 41, 147, 139, 231, 223, 160, 215, 136, 212, 98, 37, 236, 95, 218, 188, 213, 63, 95, 123, 137, 182, 52, 229, 192, 191, 81, 16, 148, 166, 122, 21, 166, 186, 162, 197, 54, 129, 73, 160, 50, 61, 111, 195, 180, 138, 33, 29, 62, 222, 98, 136, 183, 249, 241, 95, 111, 97, 30, 215, 197, 0, 200, 66, 107, 236, 236, 88, 81, 74, 152, 72, 160, 240, 200, 46, 88, 60, 244, 94, 149, 203, 81, 87, 100, 79, 230, 101, 204, 158, 202, 115, 116, 217, 102, 54, 34, 55, 244, 22, 202, 92, 237, 193, 212, 160, 156, 15, 220, 133, 51, 133, 228, 189, 31, 134, 61, 17, 122, 104, 120, 132, 236, 68, 20, 1, 213, 128, 72, 132, 252, 196, 32, 139, 212, 167, 50, 79, 160, 209, 146, 141, 170, 150, 201, 86, 84, 41, 125, 55, 3, 135, 58, 5, 247, 27, 225, 38, 116, 187, 125, 103, 118, 23, 112, 131, 59, 45, 161, 188, 97, 160, 180, 173, 188, 137, 53, 81, 30, 149, 196, 196, 4, 143, 152, 60, 119, 11, 49, 169, 24, 173, 2, 118, 118, 66, 168, 246, 4, 20, 98, 144, 225, 138, 160, 79, 217, 183, 86, 176, 10, 70, 190, 31, 172, 253, 22, 153, 29, 138, 91, 242, 125, 155, 105, 77, 26, 216, 85, 7, 134, 58, 141, 69, 45, 51, 92, 160, 157, 151, 129, 34, 116, 159, 78, 68, 243, 49, 126, 254, 215, 176, 0, 99, 211, 100, 141, 22, 150, 127, 211, 216, 211, 138, 49, 231, 99, 244, 107, 169, 128, 128, 128, 128, 128, 128, 128, 128], vec![249, 2, 17, 160, 169, 81, 88, 13, 54, 213, 36, 164, 205, 51, 0, 101, 154, 193, 218, 254, 198, 224, 154, 105, 87, 203, 161, 23, 112, 5, 157, 246, 7, 49, 193, 93, 160, 133, 13, 102, 21, 69, 215, 241, 0, 158, 202, 189, 174, 172, 36, 10, 137, 180, 82, 211, 245, 130, 153, 49, 143, 212, 243, 22, 168, 165, 187, 193, 220, 160, 131, 166, 197, 103, 203, 111, 14, 64, 124, 165, 5, 227, 95, 70, 233, 176, 77, 30, 29, 131, 161, 16, 197, 122, 146, 76, 171, 13, 26, 140, 205, 228, 160, 203, 109, 12, 210, 133, 166, 57, 99, 194, 74, 94, 95, 237, 122, 72, 247, 230, 165, 132, 26, 113, 64, 176, 53, 180, 199, 212, 47, 237, 168, 140, 219, 160, 31, 66, 131, 73, 181, 100, 76, 38, 4, 195, 124, 12, 7, 243, 91, 94, 152, 175, 164, 89, 240, 130, 149, 127, 218, 139, 0, 221, 196, 244, 237, 247, 160, 78, 204, 90, 149, 44, 133, 229, 155, 109, 187, 23, 118, 208, 176, 20, 185, 88, 196, 169, 114, 44, 2, 186, 115, 18, 248, 69, 24, 89, 169, 137, 148, 160, 207, 26, 157, 148, 70, 57, 67, 161, 127, 186, 121, 80, 213, 253, 167, 222, 118, 43, 173, 122, 56, 252, 118, 164, 215, 38, 112, 242, 41, 66, 15, 29, 160, 54, 150, 164, 0, 225, 196, 48, 222, 226, 52, 133, 116, 127, 71, 229, 189, 17, 217, 113, 36, 146, 181, 251, 126, 20, 63, 187, 80, 48, 218, 199, 63, 160, 50, 157, 25, 119, 100, 134, 44, 174, 163, 0, 90, 202, 139, 211, 239, 168, 133, 82, 31, 133, 101, 182, 143, 25, 169, 248, 253, 230, 127, 96, 182, 5, 160, 61, 169, 98, 179, 40, 153, 231, 71, 114, 43, 120, 162, 255, 149, 190, 41, 168, 234, 238, 111, 210, 22, 247, 182, 124, 132, 14, 150, 127, 58, 13, 18, 160, 119, 71, 196, 209, 133, 220, 174, 246, 89, 192, 253, 176, 22, 59, 185, 112, 113, 125, 175, 121, 26, 206, 48, 81, 68, 44, 63, 146, 109, 73, 112, 164, 160, 206, 223, 227, 3, 45, 177, 226, 148, 154, 166, 71, 116, 201, 199, 132, 92, 38, 133, 11, 69, 65, 150, 170, 34, 16, 141, 36, 137, 25, 44, 164, 123, 160, 15, 120, 235, 255, 255, 115, 146, 84, 91, 234, 225, 114, 190, 224, 8, 248, 163, 126, 157, 187, 32, 198, 200, 118, 176, 144, 70, 28, 249, 16, 107, 81, 160, 164, 247, 105, 92, 239, 108, 168, 83, 203, 62, 116, 141, 79, 38, 11, 154, 207, 0, 175, 39, 189, 120, 88, 188, 98, 167, 42, 186, 230, 56, 189, 146, 160, 61, 41, 103, 215, 203, 132, 145, 101, 137, 185, 203, 107, 193, 211, 233, 182, 2, 31, 135, 5, 205, 59, 208, 98, 187, 144, 33, 102, 170, 2, 150, 226, 160, 116, 35, 74, 208, 253, 204, 228, 200, 245, 180, 78, 104, 24, 146, 238, 169, 253, 11, 110, 138, 173, 250, 82, 210, 131, 153, 0, 92, 163, 62, 200, 107, 128], vec![249, 1, 174, 32, 185, 1, 170, 249, 1, 167, 1, 131, 185, 216, 98, 185, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 157, 248, 155, 148, 4, 92, 67, 36, 3, 157, 169, 28, 82, 197, 93, 245, 215, 133, 56, 90, 171, 7, 61, 207, 248, 99, 160, 221, 242, 82, 173, 27, 226, 200, 155, 105, 194, 176, 104, 252, 55, 141, 170, 149, 43, 167, 241, 99, 196, 161, 22, 40, 245, 90, 77, 245, 35, 179, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 34, 93, 53, 54, 172, 2, 146, 143, 22, 7, 26, 176, 80, 102, 188, 233, 92, 44, 213, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 122, 224, 66, 69, 43, 5, 132, 229, 17, 109, 14, 153, 33, 238, 211, 37, 21, 12, 22, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 214, 245, 95, 16, 52, 104, 0]];
        let root: [u8; 32] = [95, 243, 132, 6, 46, 245, 218, 123, 33, 255, 248, 65, 145, 147, 32, 117, 221, 214, 158, 29, 90, 183, 176, 84, 27, 147, 118, 77, 20, 71, 55, 204];
        let trie = EthTrie::new();
        let res = trie.verify_proof(root.into(), &[111], proof).unwrap().unwrap();
       
        let expected: Vec<u8> = vec![249, 1, 167, 1, 131, 185, 216, 98, 185, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 157, 248, 155, 148, 4, 92, 67, 36, 3, 157, 169, 28, 82, 197, 93, 245, 215, 133, 56, 90, 171, 7, 61, 207, 248, 99, 160, 221, 242, 82, 173, 27, 226, 200, 155, 105, 194, 176, 104, 252, 55, 141, 170, 149, 43, 167, 241, 99, 196, 161, 22, 40, 245, 90, 77, 245, 35, 179, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 34, 93, 53, 54, 172, 2, 146, 143, 22, 7, 26, 176, 80, 102, 188, 233, 92, 44, 213, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 122, 224, 66, 69, 43, 5, 132, 229, 17, 109, 14, 153, 33, 238, 211, 37, 21, 12, 22, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 214, 245, 95, 16, 52, 104, 0];

        assert_eq!(res, expected);
    }

    #[test]
    fn test_invalid_index_proof() {
        let proof: Vec<Vec<u8>> = vec![vec![249, 1, 49, 160, 86, 132, 220, 17, 195, 212, 250, 27, 162, 245, 193, 68, 171, 138, 4, 197, 211, 108, 97, 45, 194, 157, 207, 143, 193, 199, 208, 41, 147, 139, 231, 223, 160, 215, 136, 212, 98, 37, 236, 95, 218, 188, 213, 63, 95, 123, 137, 182, 52, 229, 192, 191, 81, 16, 148, 166, 122, 21, 166, 186, 162, 197, 54, 129, 73, 160, 50, 61, 111, 195, 180, 138, 33, 29, 62, 222, 98, 136, 183, 249, 241, 95, 111, 97, 30, 215, 197, 0, 200, 66, 107, 236, 236, 88, 81, 74, 152, 72, 160, 240, 200, 46, 88, 60, 244, 94, 149, 203, 81, 87, 100, 79, 230, 101, 204, 158, 202, 115, 116, 217, 102, 54, 34, 55, 244, 22, 202, 92, 237, 193, 212, 160, 156, 15, 220, 133, 51, 133, 228, 189, 31, 134, 61, 17, 122, 104, 120, 132, 236, 68, 20, 1, 213, 128, 72, 132, 252, 196, 32, 139, 212, 167, 50, 79, 160, 209, 146, 141, 170, 150, 201, 86, 84, 41, 125, 55, 3, 135, 58, 5, 247, 27, 225, 38, 116, 187, 125, 103, 118, 23, 112, 131, 59, 45, 161, 188, 97, 160, 180, 173, 188, 137, 53, 81, 30, 149, 196, 196, 4, 143, 152, 60, 119, 11, 49, 169, 24, 173, 2, 118, 118, 66, 168, 246, 4, 20, 98, 144, 225, 138, 160, 79, 217, 183, 86, 176, 10, 70, 190, 31, 172, 253, 22, 153, 29, 138, 91, 242, 125, 155, 105, 77, 26, 216, 85, 7, 134, 58, 141, 69, 45, 51, 92, 160, 157, 151, 129, 34, 116, 159, 78, 68, 243, 49, 126, 254, 215, 176, 0, 99, 211, 100, 141, 22, 150, 127, 211, 216, 211, 138, 49, 231, 99, 244, 107, 169, 128, 128, 128, 128, 128, 128, 128, 128], vec![249, 2, 17, 160, 169, 81, 88, 13, 54, 213, 36, 164, 205, 51, 0, 101, 154, 193, 218, 254, 198, 224, 154, 105, 87, 203, 161, 23, 112, 5, 157, 246, 7, 49, 193, 93, 160, 133, 13, 102, 21, 69, 215, 241, 0, 158, 202, 189, 174, 172, 36, 10, 137, 180, 82, 211, 245, 130, 153, 49, 143, 212, 243, 22, 168, 165, 187, 193, 220, 160, 131, 166, 197, 103, 203, 111, 14, 64, 124, 165, 5, 227, 95, 70, 233, 176, 77, 30, 29, 131, 161, 16, 197, 122, 146, 76, 171, 13, 26, 140, 205, 228, 160, 203, 109, 12, 210, 133, 166, 57, 99, 194, 74, 94, 95, 237, 122, 72, 247, 230, 165, 132, 26, 113, 64, 176, 53, 180, 199, 212, 47, 237, 168, 140, 219, 160, 31, 66, 131, 73, 181, 100, 76, 38, 4, 195, 124, 12, 7, 243, 91, 94, 152, 175, 164, 89, 240, 130, 149, 127, 218, 139, 0, 221, 196, 244, 237, 247, 160, 78, 204, 90, 149, 44, 133, 229, 155, 109, 187, 23, 118, 208, 176, 20, 185, 88, 196, 169, 114, 44, 2, 186, 115, 18, 248, 69, 24, 89, 169, 137, 148, 160, 207, 26, 157, 148, 70, 57, 67, 161, 127, 186, 121, 80, 213, 253, 167, 222, 118, 43, 173, 122, 56, 252, 118, 164, 215, 38, 112, 242, 41, 66, 15, 29, 160, 54, 150, 164, 0, 225, 196, 48, 222, 226, 52, 133, 116, 127, 71, 229, 189, 17, 217, 113, 36, 146, 181, 251, 126, 20, 63, 187, 80, 48, 218, 199, 63, 160, 50, 157, 25, 119, 100, 134, 44, 174, 163, 0, 90, 202, 139, 211, 239, 168, 133, 82, 31, 133, 101, 182, 143, 25, 169, 248, 253, 230, 127, 96, 182, 5, 160, 61, 169, 98, 179, 40, 153, 231, 71, 114, 43, 120, 162, 255, 149, 190, 41, 168, 234, 238, 111, 210, 22, 247, 182, 124, 132, 14, 150, 127, 58, 13, 18, 160, 119, 71, 196, 209, 133, 220, 174, 246, 89, 192, 253, 176, 22, 59, 185, 112, 113, 125, 175, 121, 26, 206, 48, 81, 68, 44, 63, 146, 109, 73, 112, 164, 160, 206, 223, 227, 3, 45, 177, 226, 148, 154, 166, 71, 116, 201, 199, 132, 92, 38, 133, 11, 69, 65, 150, 170, 34, 16, 141, 36, 137, 25, 44, 164, 123, 160, 15, 120, 235, 255, 255, 115, 146, 84, 91, 234, 225, 114, 190, 224, 8, 248, 163, 126, 157, 187, 32, 198, 200, 118, 176, 144, 70, 28, 249, 16, 107, 81, 160, 164, 247, 105, 92, 239, 108, 168, 83, 203, 62, 116, 141, 79, 38, 11, 154, 207, 0, 175, 39, 189, 120, 88, 188, 98, 167, 42, 186, 230, 56, 189, 146, 160, 61, 41, 103, 215, 203, 132, 145, 101, 137, 185, 203, 107, 193, 211, 233, 182, 2, 31, 135, 5, 205, 59, 208, 98, 187, 144, 33, 102, 170, 2, 150, 226, 160, 116, 35, 74, 208, 253, 204, 228, 200, 245, 180, 78, 104, 24, 146, 238, 169, 253, 11, 110, 138, 173, 250, 82, 210, 131, 153, 0, 92, 163, 62, 200, 107, 128], vec![249, 1, 174, 32, 185, 1, 170, 249, 1, 167, 1, 131, 185, 216, 98, 185, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 157, 248, 155, 148, 4, 92, 67, 36, 3, 157, 169, 28, 82, 197, 93, 245, 215, 133, 56, 90, 171, 7, 61, 207, 248, 99, 160, 221, 242, 82, 173, 27, 226, 200, 155, 105, 194, 176, 104, 252, 55, 141, 170, 149, 43, 167, 241, 99, 196, 161, 22, 40, 245, 90, 77, 245, 35, 179, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 34, 93, 53, 54, 172, 2, 146, 143, 22, 7, 26, 176, 80, 102, 188, 233, 92, 44, 213, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 122, 224, 66, 69, 43, 5, 132, 229, 17, 109, 14, 153, 33, 238, 211, 37, 21, 12, 22, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 214, 245, 95, 16, 52, 104, 0]];
        let root: [u8; 32] = [95, 243, 132, 6, 46, 245, 218, 123, 33, 255, 248, 65, 145, 147, 32, 117, 221, 214, 158, 29, 90, 183, 176, 84, 27, 147, 118, 77, 20, 71, 55, 204];
        // let memdb = MemoryDB::new();    
        let trie = EthTrie::new();
        let res = trie.verify_proof(root.into(), &[101], proof);

        assert!(res.is_err());
    }

    #[test]
    fn test_invalid_proof() {
        let proof: Vec<Vec<u8>> = vec![vec![248, 1, 49, 160, 86, 132, 220, 17, 195, 212, 250, 27, 162, 245, 193, 68, 171, 138, 4, 197, 211, 108, 97, 45, 194, 157, 207, 143, 193, 199, 208, 41, 147, 139, 231, 223, 160, 215, 136, 212, 98, 37, 236, 95, 218, 188, 213, 63, 95, 123, 137, 182, 52, 229, 192, 191, 81, 16, 148, 166, 122, 21, 166, 186, 162, 197, 54, 129, 73, 160, 50, 61, 111, 195, 180, 138, 33, 29, 62, 222, 98, 136, 183, 249, 241, 95, 111, 97, 30, 215, 197, 0, 200, 66, 107, 236, 236, 88, 81, 74, 152, 72, 160, 240, 200, 46, 88, 60, 244, 94, 149, 203, 81, 87, 100, 79, 230, 101, 204, 158, 202, 115, 116, 217, 102, 54, 34, 55, 244, 22, 202, 92, 237, 193, 212, 160, 156, 15, 220, 133, 51, 133, 228, 189, 31, 134, 61, 17, 122, 104, 120, 132, 236, 68, 20, 1, 213, 128, 72, 132, 252, 196, 32, 139, 212, 167, 50, 79, 160, 209, 146, 141, 170, 150, 201, 86, 84, 41, 125, 55, 3, 135, 58, 5, 247, 27, 225, 38, 116, 187, 125, 103, 118, 23, 112, 131, 59, 45, 161, 188, 97, 160, 180, 173, 188, 137, 53, 81, 30, 149, 196, 196, 4, 143, 152, 60, 119, 11, 49, 169, 24, 173, 2, 118, 118, 66, 168, 246, 4, 20, 98, 144, 225, 138, 160, 79, 217, 183, 86, 176, 10, 70, 190, 31, 172, 253, 22, 153, 29, 138, 91, 242, 125, 155, 105, 77, 26, 216, 85, 7, 134, 58, 141, 69, 45, 51, 92, 160, 157, 151, 129, 34, 116, 159, 78, 68, 243, 49, 126, 254, 215, 176, 0, 99, 211, 100, 141, 22, 150, 127, 211, 216, 211, 138, 49, 231, 99, 244, 107, 169, 128, 128, 128, 128, 128, 128, 128, 128], vec![249, 2, 17, 160, 169, 81, 88, 13, 54, 213, 36, 164, 205, 51, 0, 101, 154, 193, 218, 254, 198, 224, 154, 105, 87, 203, 161, 23, 112, 5, 157, 246, 7, 49, 193, 93, 160, 133, 13, 102, 21, 69, 215, 241, 0, 158, 202, 189, 174, 172, 36, 10, 137, 180, 82, 211, 245, 130, 153, 49, 143, 212, 243, 22, 168, 165, 187, 193, 220, 160, 131, 166, 197, 103, 203, 111, 14, 64, 124, 165, 5, 227, 95, 70, 233, 176, 77, 30, 29, 131, 161, 16, 197, 122, 146, 76, 171, 13, 26, 140, 205, 228, 160, 203, 109, 12, 210, 133, 166, 57, 99, 194, 74, 94, 95, 237, 122, 72, 247, 230, 165, 132, 26, 113, 64, 176, 53, 180, 199, 212, 47, 237, 168, 140, 219, 160, 31, 66, 131, 73, 181, 100, 76, 38, 4, 195, 124, 12, 7, 243, 91, 94, 152, 175, 164, 89, 240, 130, 149, 127, 218, 139, 0, 221, 196, 244, 237, 247, 160, 78, 204, 90, 149, 44, 133, 229, 155, 109, 187, 23, 118, 208, 176, 20, 185, 88, 196, 169, 114, 44, 2, 186, 115, 18, 248, 69, 24, 89, 169, 137, 148, 160, 207, 26, 157, 148, 70, 57, 67, 161, 127, 186, 121, 80, 213, 253, 167, 222, 118, 43, 173, 122, 56, 252, 118, 164, 215, 38, 112, 242, 41, 66, 15, 29, 160, 54, 150, 164, 0, 225, 196, 48, 222, 226, 52, 133, 116, 127, 71, 229, 189, 17, 217, 113, 36, 146, 181, 251, 126, 20, 63, 187, 80, 48, 218, 199, 63, 160, 50, 157, 25, 119, 100, 134, 44, 174, 163, 0, 90, 202, 139, 211, 239, 168, 133, 82, 31, 133, 101, 182, 143, 25, 169, 248, 253, 230, 127, 96, 182, 5, 160, 61, 169, 98, 179, 40, 153, 231, 71, 114, 43, 120, 162, 255, 149, 190, 41, 168, 234, 238, 111, 210, 22, 247, 182, 124, 132, 14, 150, 127, 58, 13, 18, 160, 119, 71, 196, 209, 133, 220, 174, 246, 89, 192, 253, 176, 22, 59, 185, 112, 113, 125, 175, 121, 26, 206, 48, 81, 68, 44, 63, 146, 109, 73, 112, 164, 160, 206, 223, 227, 3, 45, 177, 226, 148, 154, 166, 71, 116, 201, 199, 132, 92, 38, 133, 11, 69, 65, 150, 170, 34, 16, 141, 36, 137, 25, 44, 164, 123, 160, 15, 120, 235, 255, 255, 115, 146, 84, 91, 234, 225, 114, 190, 224, 8, 248, 163, 126, 157, 187, 32, 198, 200, 118, 176, 144, 70, 28, 249, 16, 107, 81, 160, 164, 247, 105, 92, 239, 108, 168, 83, 203, 62, 116, 141, 79, 38, 11, 154, 207, 0, 175, 39, 189, 120, 88, 188, 98, 167, 42, 186, 230, 56, 189, 146, 160, 61, 41, 103, 215, 203, 132, 145, 101, 137, 185, 203, 107, 193, 211, 233, 182, 2, 31, 135, 5, 205, 59, 208, 98, 187, 144, 33, 102, 170, 2, 150, 226, 160, 116, 35, 74, 208, 253, 204, 228, 200, 245, 180, 78, 104, 24, 146, 238, 169, 253, 11, 110, 138, 173, 250, 82, 210, 131, 153, 0, 92, 163, 62, 200, 107, 128], vec![249, 1, 174, 32, 185, 1, 170, 249, 1, 167, 1, 131, 185, 216, 98, 185, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 157, 248, 155, 148, 4, 92, 67, 36, 3, 157, 169, 28, 82, 197, 93, 245, 215, 133, 56, 90, 171, 7, 61, 207, 248, 99, 160, 221, 242, 82, 173, 27, 226, 200, 155, 105, 194, 176, 104, 252, 55, 141, 170, 149, 43, 167, 241, 99, 196, 161, 22, 40, 245, 90, 77, 245, 35, 179, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 34, 93, 53, 54, 172, 2, 146, 143, 22, 7, 26, 176, 80, 102, 188, 233, 92, 44, 213, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 122, 224, 66, 69, 43, 5, 132, 229, 17, 109, 14, 153, 33, 238, 211, 37, 21, 12, 22, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 214, 245, 95, 16, 52, 104, 0]];
        let root: [u8; 32] = [95, 243, 132, 6, 46, 245, 218, 123, 33, 255, 248, 65, 145, 147, 32, 117, 221, 214, 158, 29, 90, 183, 176, 84, 27, 147, 118, 77, 20, 71, 55, 204];
        // let memdb = MemoryDB::new();    
        let trie = EthTrie::new();
        let res = trie.verify_proof(root.into(), &[111], proof);

        assert!(res.is_err());
    }


}